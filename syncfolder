#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

usage() {
    cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-s] [-h] [-d] src [dst]

Will keep the specified path synchronized with a specified path on the bulk storage. 

Examples. 
    To sync the content of the current folder with BULK/experimental_data/myfolder
        $ transferdata . experimental_data/myfolder
    To sync the folder mydatafolder with BULK/mydatafolder
        $ transferdata mydatafolder
    To sync the folder mydatafolder with BULK/folder1/mydatafolder
        $ transferdata mydatafolder folder1/mydatafolder

Available options:

-h, --help      Print this help and exit
-d, --dryrun    Prints the src and destination folders, without startig syncing
-v, --verbose   Print script debug info

EOF
    exit
}

cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
    # script cleanup here
}

setup_colors() {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
    else
        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    fi
}

msg() {
    echo >&2 -e "${1-}"
}

die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

parse_params() {
    # default values of variables set from params
    dryrun=0

    while :; do
        case "${1-}" in
        -h | --help) usage ;;
        -d | --dryrun) dryrun=1 ;;
        -v | --verbose) set -x ;;
        --no-color) NO_COLOR=1 ;;
        -?*) die "Unknown option: $1" ;;
        *) break ;;
        esac
        shift
    done

    args=("$@")

    # check required params and arguments
    [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

    return 0
}

parse_params "$@"
setup_colors

# msg "${RED}Read parameters:${NOFORMAT}"
# msg "- arguments (${#args[@]}): ${args[*]-}"

# ==============================================================================
# script logic here
# ==============================================================================

# some constants
remote_base_path=/tudelft.net/staff-bulk/tnw/IST/AK/hpc/rwaasdorp1/

# ------------------------------------------------------------------------------
# setup paths
# ------------------------------------------------------------------------------

# this is the base path for the remote directory (dst)

# parse src and dst
src_path=${args[0]}

if [ $src_path == . ]; then
    # if src is . replace by full current working dir on dhpc
    src_path=$(pwd -P)
elif [ "${src_path:0:1}" = "/" ]; then
    # full path, do nothing
    :
else
    # not current dir, not full path, concatenate arg with current path
    src_path=$(pwd -P)/$src_path
fi

src_folder_name=$(basename $src_path)

# if dst path not exist leave empty
dst_path=''
if [ ${#args[@]} -eq 2 ]; then
    dst_path=${args[1]}
fi

# now make full path for dst
dst_path=$remote_base_path/$dst_path/$src_folder_name

# check if src paths exists
if [ ! -d $src_path ]; then
    die "${RED}Error: Source path does not exist:\n    ${NOFORMAT}$src_path\n"
fi

# ------------------------------------------------------------------------------
# construct rsync command
# ------------------------------------------------------------------------------
rsync_cmd="rsync -av --no-perms ${src_path}/ ${dst_path}" # note extra / to copy dirs contents to target dir

print_transfer() {
    msg "Summary"
    msg "  Source path:\n    ${src_path}"
    msg "  Destination path:\n    ${dst_path}"
    msg ""
    # msg "  rsync command:\n    ${rsync_cmd}"
}

execute_sync() {
    echo Starting rsync sync:
    mkdir -p ${dst_path}
    rsync_cmd="rsync -turvz --exclude '.*.swp'"
    $rsync_cmd ${src_path}/ ${dst_path}/
    while inotifywait -r -e modify,create,move ${src_path} ${dst_path}; do
        sleep 1
        $rsync_cmd ${src_path}/ ${dst_path}/
        $rsync_cmd ${dst_path}/ ${src_path}/
    done
}

# debug info
if [ $dryrun -eq 1 ]; then
    print_transfer
else
    print_transfer
    read -p "Please review above. Start transfer? [y/n] " -n 1 -r
    echo # (optional) move to a new line

    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
    fi

    # still here!
    execute_sync
fi
