#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

usage() {
    cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-s] [-h] [-d] src [dst]

Will transfer the specified path to my bulk storage. will preserve relative path. Can work in transfernode mode on DHPC, or just plainly execute an rsync command. 

Examples. 
    To transfer the current folder with all its contents to BULK/experimental_data/myfolder
        $ transferdata . experimental_data/myfolder
    To transfer the folder mydatafolder to BULK/mydatafolder
        $ transferdata mydatafolder
    To transfer the folder mydatafolder to BULK/folder1/mydatafolder
        $ transferdata mydatafolder folder1/mydatafolder

Available options:

-s, --slurm     Will create and execute a slurm job on the transfernode of DHPC
-h, --help      Print this help and exit
-d, --dryrun    Prints the src and destination folders, without starting the transfer
-v, --verbose   Print script debug info

EOF
    exit
}

cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
    # script cleanup here
}

setup_colors() {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
    else
        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    fi
}

msg() {
    echo >&2 -e "${1-}"
}

die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

parse_params() {
    # default values of variables set from params
    dryrun=0
    swap_dst_src=0
    slurmjob=0

    while :; do
        case "${1-}" in
        -h | --help) usage ;;
        -d | --dryrun) dryrun=1 ;;
        -s | --slurm) slurmjob=1 ;;
        # -s | --swap) swap_dst_src=1 ;;
        -v | --verbose) set -x ;;
        --no-color) NO_COLOR=1 ;;
        -?*) die "Unknown option: $1" ;;
        *) break ;;
        esac
        shift
    done

    args=("$@")

    # check required params and arguments
    [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

    return 0
}

parse_params "$@"
setup_colors

# msg "${RED}Read parameters:${NOFORMAT}"
# msg "- arguments (${#args[@]}): ${args[*]-}"

# ==============================================================================
# script logic here
# ==============================================================================

# some constants
log_folder=/scratch/rwaasdorp1/transfer_logs
remote_base_path=/tudelft.net/staff-bulk/tnw/IST/AK/hpc/rwaasdorp1/

# ------------------------------------------------------------------------------
# setup paths
# ------------------------------------------------------------------------------

# this is the base path for the remote directory (dst)

# parse src and dst
src_path=${args[0]}

if [ $src_path == . ]; then
    # if src is . replace by full current working dir on dhpc
    src_path=$(pwd -P)
elif [ "${src_path:0:1}" = "/" ]; then
    # full path, do nothing
    :
else
    # not current dir, not full path, concatenate arg with current path
    src_path=$(pwd -P)/$src_path
fi

src_folder_name=$(basename $src_path)

# if dst path not exist leave empty
dst_path=''
if [ ${#args[@]} -eq 2 ]; then
    dst_path=${args[1]}
fi

# now make full path for dst
dst_path=$remote_base_path/$dst_path/$src_folder_name

# check if src paths exists
if [ ! -d $src_path ]; then
    die "${RED}Error: Source path does not exist:\n    ${NOFORMAT}$src_path\n"
fi

# ------------------------------------------------------------------------------
# construct rsync command
# ------------------------------------------------------------------------------
rsync_cmd="rsync -av --no-perms ${src_path}/ ${dst_path}" # note extra / to copy dirs contents to target dir

print_transfer() {
    msg "Summary"
    msg "  Source path:\n    ${src_path}"
    msg "  Destination path:\n    ${dst_path}"
    msg ""
    # msg "  rsync command:\n    ${rsync_cmd}"
}

submit_transfer() {
    sbatch \
        --job-name="autotransfer" \
        --partition=trans \
        --time=01:00:00 \
        --ntasks=1 \
        --cpus-per-task=1 \
        --output=$log_folder/%x-%j.out \
        --wrap="echo hello"
}

execute_transfer() {
    echo Starting rsync transfer:
    $rsync_cmd
}

# debug info
if [ $dryrun -eq 1 ]; then
    print_transfer
else
    print_transfer
    read -p "Please review above. Start transfer? [y/n] " -n 1 -r
    echo # (optional) move to a new line

    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
    fi

    # still here!
    mkdir -p ${dst_path}
    if [ $slurmjob -eq 1 ]; then
        submit_transfer
    else
        execute_transfer
    fi
fi
